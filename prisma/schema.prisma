generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Car {
  id           String           @id @default(cuid())
  brand        String
  model        String
  img          String
  year         Int
  dailyPrice   Int
  type         CarType
  transmission TransmissionType
  fuel         FuelType
  carStatus    CarStatus        @default(AVAILABLE)
  location     Location
  class        Class
  seating      Int
  description  String
  userId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  booking      Booking[]

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("car")
}

model Booking {
  id        String        @id @default(cuid())
  userId    String
  carId     String
  startDate DateTime
  endDate   DateTime
  status    BookingStatus @default(Pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  car  Car  @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId])
  @@map("booking")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  car           Car[]
  booking       Booking[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum BookingStatus {
  Pending
  Cancelled
  Confirmed
}

enum CarType {
  SUV
  Sedan
  Hatchback
  Electric
  Convertible
  Hybrid
  Coupe
  Van
  Truck
}

enum TransmissionType {
  Manual
  Automatic
  SemiAutomatic
}

enum FuelType {
  Gas
  Diesel
  Petrol
  Electric
  Hybrid
}

enum CarStatus {
  AVAILABLE
  UNAVAILABLE
}

enum Location {
  Mandalay
  Yangon
  Naypyitaw
  Sagaing
  Rakhine
}

enum Class {
  A_Class
  B_Class
  C_Class
  D_Class
  E_Class
  F_Class
  J_Class
  M_Class
  S_Class
}
